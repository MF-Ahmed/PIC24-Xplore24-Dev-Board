/********************************************************************
 *                                                                  *
 *          Control & Automation Division                           *
 *                                                                  *
 *      DR. A. Q. KHAN RESEARCH LABORATORIES                        *
 *                                                                  *
 *      Centrifuge Plant Control Software Package                   *
 *                                                                  *
 *   This document is the property of Government of Pakistan and    *
 *   is issued for the information of such persons who  need  to    *
 *   know its  contents in the course of their official  duties.    *
 *                                                                  *
 *   The information in this document is subject to change without  *
 *   notice and should not be construed as a committment by C & A.  *
 *                                                                  *
 *   Version K01/C12_B1	PIC24FJ256GA106                            	*
 *                                                                  *
 *   Tariq Mahmood Akhtar	01-Apr-2009                             *
 *                                                                  *
 *   ADC.c - 														*
 *                  												*
 *             								                        *
 ********************************************************************/
#include <P24FJ256GA106.h>
#define USE_AND_OR /* To enable AND_OR mask setting */
#include<uart.h>
#include<PPS.h>




/*
To perform an A/D conversion:
1. Configure the A/D module:
	a) Configure port pins as analog inputs and/or
		select band gap reference input
		(AD1PCFGL<15:0> and AD1PCFGH<1:0>).
	b) Select voltage reference source to match
		expected range on analog inputs
		(AD1CON2<15:13>).
	c) Select the analog conversion clock to
		match desired data rate with processor
		clock (AD1CON3<7:0>).
	d) Select the appropriate sample/conversion
		sequence (AD1CON1<7:5> and AD1CON3<12:8>).
	e) Select how conversion results are
		presented in the buffer (AD1CON1<9:8>).
	f) Select interrupt rate (AD1CON2<5:2>).
	g) Turn on A/D module (AD1CON1<15>).
2. Configure A/D interrupt (if required):
	a) Clear the AD1IF bit.
	b) Select A/D interrupt priority.
*/

//int CHNO=7;

char Rx_UARTS(unsigned char uno);
void ConfigADC()
{
  AD1PCFG=0xFF3F;
  //AD1PCFG=0xFF9F;
  AD1CON1=0x00E0;
  //AD1CSSL=0x0000;
  //AD1CSSL=0x0060;
  AD1CSSL=0x00C0;
  AD1CON3=0x1F02;
  AD1CON2=0x0000;
  AD1CON1bits.ADON=1;				// A/D convertter module is operating
}

int ReadADC(int ch)
{
  AD1CHS = ch;						// Select Channel no.
  AD1CON1bits.SAMP = 1;				// Ends sampling and starts conversion
  while(!AD1CON1bits.DONE);			// Conversion done ?
  AD1CON1bits.SAMP = 0;				// Ends sampling and starts conversion
  return ADC1BUF0;     				// Read the conversion result
  //if(ch==5) return ADC1BUF5;     				// Read the conversion result
  //else return ADC1BUF6;     				// Read the conversion result
}

void _ISRFAST _ADC1Interrupt(void);
void _ISRFAST _ADC1Interrupt(void)
{
Tx_UARTS2('F');

}
char udata;
void main()
{
  int a;
 
  unsigned int uart_no;
char umer;
 TRISE=0;							// Set PORTE for output
 TRISB=0;	
  RemapPins_usart4();
//  ConfigADC();
 // config_USART4();
  /*UART initialized to 2400 baudrate @BRGH=0, 8bit,no parity and 1 stopbit*/
OpenUART2(UART_EN, UART_TX_ENABLE, 12); 

//while(1)
//{Tx_UARTS2('a');
//DelayMs();DelayMs();
//}

while(1)
{
 umer = Rx_UARTS(2);
DelayMs();
  Tx_UARTS2(umer);
PORTE = 0x0000;
PORTB = 0xFFFF;
   DelayMs();
PORTE = 0xFFFF;
PORTB = 0x0000;
 DelayMs();

}
/*
  while(1) {
    a=ReadADC(6);
	//CHNO++; if(CHNO>7) CHNO=6;
    //a=ReadADC(6);
   //udata=Rx_UARTS(4);
    
	Tx_UARTS4(a);
    Tx_UARTS4(a>>8);
    DelayMs(); DelayMs(); DelayMs();
  }
*/
//  return 0;

}

void config_USART4(void)
{							 
  U4BRG=50;	//BR=9600
  U4MODEbits.PDSEL1=1;  	// 8 bit data, odd parity, one stop bit
  U4MODEbits.UARTEN=1;	// ENABLE TX,RX
  U4STAbits.UTXEN=1;


}

void DelayMs(void)
{
int f, j;
for(f=0;f<500;f++)
for(j=0;j<10;j++);

}

void Tx_UARTS2(unsigned char Txdata)
{
     while(U2STAbits.UTXBF);
     U2TXREG=Txdata;
}



char Rx_UARTS(unsigned char uno)
{ 
 switch(uno){
  case 1:
    while(!U1STAbits.URXDA);
    return U1RXREG; 
    break;
  case 2:
    while(!U2STAbits.URXDA);
    return U2RXREG; 
    break;
  case 3:
    while(!U3STAbits.URXDA);
    return U3RXREG; 
    break;
  case 4:
   while(!U4STAbits.URXDA);
   return U4RXREG;
    break;
 }

}


void RemapPins_usart4(void)
{
  // Unlock Registers
 /* asm volatile ("MOV 	#OSCCON, w1  \n"
  				"MOV 	#0x46, 	w2 	 \n"
  				"MOV 	#0x57, 	w3 	 \n"
  				"MOV.b 	w2, 	[w1] \n"
  				"MOV.b 	w3, 	[w1] \n"
				"BCLR 	OSCCON,	#6"
				);
//**************************************************************

  

  RPINR27bits.U4RXR = 27;			// Assign U4RX To Pin RP27
  RPOR13bits.RP26R 	= 30;			// Assign U4TX To Pin RP26

//***************************************************************
// Lock Registers
  asm volatile ("MOV #OSCCON, w1 \n"
				"MOV #0x46, w2 \n"
				"MOV #0x57, w3 \n"
				"MOV.b w2, [w1] \n"
				"MOV.b w3, [w1] \n"
				"BSET OSCCON, #6" 
				);
*/
  // iPPSInput(IN_FN_PPS_U4RX,IN_PIN_PPS_RP27);


// iPPSOutput(OUT_PIN_PPS_RP26,OUT_FN_PPS_U4TX);
//iPPSInput(IN_FN_PPS_U4RX,IN_PIN_PPS_RP10);
iPPSInput(IN_FN_PPS_U2RX,IN_PIN_PPS_RP27);
 // iPPSInput(IN_FN_PPS_U2CTS,IN_PIN_PPS_RPI32);
  iPPSOutput(OUT_PIN_PPS_RP26,OUT_FN_PPS_U2TX);
 // iPPSOutput(OUT_PIN_PPS_RP31,OUT_FN_PPS_U2RTS);



}
